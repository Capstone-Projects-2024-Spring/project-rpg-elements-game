{
  "docusaurus-plugin-content-docs": {
    "default": {
      "loadedVersions": [
        {
          "versionName": "current",
          "label": "Next",
          "banner": null,
          "badge": false,
          "noIndex": false,
          "className": "docs-version-current",
          "path": "/your-project-name/docs",
          "tagsPath": "/your-project-name/docs/tags",
          "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs",
          "editUrlLocalized": "https://github.com/undefined/your-project-name/edit/main/documentation/i18n/en/docusaurus-plugin-content-docs/current",
          "isLast": true,
          "routePriority": -1,
          "sidebarFilePath": "/workspaces/project-rpg-elements-game/documentation/sidebars.js",
          "contentPath": "/workspaces/project-rpg-elements-game/documentation/docs",
          "contentPathLocalized": "/workspaces/project-rpg-elements-game/documentation/i18n/en/docusaurus-plugin-content-docs/current",
          "docs": [
            {
              "id": "api-specification/calculator-model-generated",
              "title": "CalculatorModel.java",
              "description": "(generated using Javadoc to Markdown)",
              "source": "@site/docs/api-specification/calculator-model-generated.md",
              "sourceDirName": "api-specification",
              "slug": "/api-specification/calculator-model-generated",
              "permalink": "/your-project-name/docs/api-specification/calculator-model-generated",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/api-specification/calculator-model-generated.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 3,
              "frontMatter": {
                "sidebar_position": 3
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "API 1 - Swagger Petstore",
                "permalink": "/your-project-name/docs/api-specification/openapi-spec"
              },
              "next": {
                "title": "Test Procedures",
                "permalink": "/your-project-name/docs/category/test-procedures"
              }
            },
            {
              "id": "api-specification/design-api-intro",
              "title": "Design Document - Part II API",
              "description": "What should be in this section.",
              "source": "@site/docs/api-specification/design-api-intro.md",
              "sourceDirName": "api-specification",
              "slug": "/api-specification/design-api-intro",
              "permalink": "/your-project-name/docs/api-specification/design-api-intro",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/api-specification/design-api-intro.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1,
                "description": "What should be in this section."
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "API Specification",
                "permalink": "/your-project-name/docs/category/api-specification"
              },
              "next": {
                "title": "API 1 - Swagger Petstore",
                "permalink": "/your-project-name/docs/api-specification/openapi-spec"
              }
            },
            {
              "id": "api-specification/openapi-spec",
              "title": "API 1 - Swagger Petstore",
              "description": "API Specification from openapi.yml",
              "source": "@site/docs/api-specification/openapi-spec.md",
              "sourceDirName": "api-specification",
              "slug": "/api-specification/openapi-spec",
              "permalink": "/your-project-name/docs/api-specification/openapi-spec",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/api-specification/openapi-spec.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 2,
              "frontMatter": {
                "title": "API 1 - Swagger Petstore",
                "description": "API Specification from openapi.yml",
                "hide_table_of_contents": true,
                "sidebar_position": 2
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Design Document - Part II API",
                "permalink": "/your-project-name/docs/api-specification/design-api-intro"
              },
              "next": {
                "title": "CalculatorModel.java",
                "permalink": "/your-project-name/docs/api-specification/calculator-model-generated"
              }
            },
            {
              "id": "intro",
              "title": "Introduction",
              "description": "",
              "source": "@site/docs/intro.mdx",
              "sourceDirName": ".",
              "slug": "/intro",
              "permalink": "/your-project-name/docs/intro",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/intro.mdx",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              },
              "sidebar": "docsSidebar",
              "next": {
                "title": "Requirements Specification",
                "permalink": "/your-project-name/docs/category/requirements-specification"
              }
            },
            {
              "id": "requirements/Features-and-Requirements",
              "title": "Features and Requirements",
              "description": "Functional Requirements",
              "source": "@site/docs/requirements/Features-and-Requirements.md",
              "sourceDirName": "requirements",
              "slug": "/requirements/Features-and-Requirements",
              "permalink": "/your-project-name/docs/requirements/Features-and-Requirements",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/requirements/Features-and-Requirements.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Requirements Specification",
                "permalink": "/your-project-name/docs/category/requirements-specification"
              },
              "next": {
                "title": "General Requirements",
                "permalink": "/your-project-name/docs/requirements/General-Requirements"
              }
            },
            {
              "id": "requirements/General-Requirements",
              "title": "General Requirements",
              "description": "Jira",
              "source": "@site/docs/requirements/General-Requirements.md",
              "sourceDirName": "requirements",
              "slug": "/requirements/General-Requirements",
              "permalink": "/your-project-name/docs/requirements/General-Requirements",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/requirements/General-Requirements.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 2,
              "frontMatter": {
                "sidebar_position": 2
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Features and Requirements",
                "permalink": "/your-project-name/docs/requirements/Features-and-Requirements"
              },
              "next": {
                "title": "System Block Diagram",
                "permalink": "/your-project-name/docs/requirements/System-Block-Diagram"
              }
            },
            {
              "id": "requirements/System-Block-Diagram",
              "title": "System Block Diagram",
              "description": "SystemBlockDiagram_Updated",
              "source": "@site/docs/requirements/System-Block-Diagram.md",
              "sourceDirName": "requirements",
              "slug": "/requirements/System-Block-Diagram",
              "permalink": "/your-project-name/docs/requirements/System-Block-Diagram",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/requirements/System-Block-Diagram.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 3,
              "frontMatter": {
                "sidebar_position": 3
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "General Requirements",
                "permalink": "/your-project-name/docs/requirements/General-Requirements"
              },
              "next": {
                "title": "System Overview",
                "permalink": "/your-project-name/docs/requirements/System-Overview"
              }
            },
            {
              "id": "requirements/System-Overview",
              "title": "System Overview",
              "description": "Project Abstract",
              "source": "@site/docs/requirements/System-Overview.md",
              "sourceDirName": "requirements",
              "slug": "/requirements/System-Overview",
              "permalink": "/your-project-name/docs/requirements/System-Overview",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/requirements/System-Overview.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 4,
              "frontMatter": {
                "sidebar_position": 4
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "System Block Diagram",
                "permalink": "/your-project-name/docs/requirements/System-Block-Diagram"
              },
              "next": {
                "title": "Use-case descriptions",
                "permalink": "/your-project-name/docs/requirements/Use-Case-Descriptions"
              }
            },
            {
              "id": "requirements/Use-Case-Descriptions",
              "title": "Use-case descriptions",
              "description": "Use Case 1",
              "source": "@site/docs/requirements/Use-Case-Descriptions.md",
              "sourceDirName": "requirements",
              "slug": "/requirements/Use-Case-Descriptions",
              "permalink": "/your-project-name/docs/requirements/Use-Case-Descriptions",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/requirements/Use-Case-Descriptions.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 5,
              "frontMatter": {
                "sidebar_position": 5
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "System Overview",
                "permalink": "/your-project-name/docs/requirements/System-Overview"
              },
              "next": {
                "title": "System Architecture",
                "permalink": "/your-project-name/docs/category/system-architecture"
              }
            },
            {
              "id": "system-architecture/Algorithms",
              "title": "Algorithms",
              "description": "Procedural Generation Algorithm",
              "source": "@site/docs/system-architecture/Algorithms.md",
              "sourceDirName": "system-architecture",
              "slug": "/system-architecture/Algorithms",
              "permalink": "/your-project-name/docs/system-architecture/Algorithms",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/system-architecture/Algorithms.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "System Architecture",
                "permalink": "/your-project-name/docs/category/system-architecture"
              },
              "next": {
                "title": "Architecture",
                "permalink": "/your-project-name/docs/system-architecture/Architecture"
              }
            },
            {
              "id": "system-architecture/Architecture",
              "title": "Architecture",
              "description": "Unity (Game Engine)",
              "source": "@site/docs/system-architecture/Architecture.md",
              "sourceDirName": "system-architecture",
              "slug": "/system-architecture/Architecture",
              "permalink": "/your-project-name/docs/system-architecture/Architecture",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/system-architecture/Architecture.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 2,
              "frontMatter": {
                "sidebar_position": 2
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Algorithms",
                "permalink": "/your-project-name/docs/system-architecture/Algorithms"
              },
              "next": {
                "title": "Development Environment",
                "permalink": "/your-project-name/docs/system-architecture/Development-Environment"
              }
            },
            {
              "id": "system-architecture/Development-Environment",
              "title": "Development Environment",
              "description": "Editors and IDEs:",
              "source": "@site/docs/system-architecture/Development-Environment.md",
              "sourceDirName": "system-architecture",
              "slug": "/system-architecture/Development-Environment",
              "permalink": "/your-project-name/docs/system-architecture/Development-Environment",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/system-architecture/Development-Environment.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 4,
              "frontMatter": {
                "sidebar_position": 4
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Architecture",
                "permalink": "/your-project-name/docs/system-architecture/Architecture"
              },
              "next": {
                "title": "Sequence-Diagrams",
                "permalink": "/your-project-name/docs/system-architecture/Sequence-Diagrams"
              }
            },
            {
              "id": "system-architecture/Sequence-Diagrams",
              "title": "Sequence-Diagrams",
              "description": "State Diagram for Game Movement",
              "source": "@site/docs/system-architecture/Sequence-Diagrams.md",
              "sourceDirName": "system-architecture",
              "slug": "/system-architecture/Sequence-Diagrams",
              "permalink": "/your-project-name/docs/system-architecture/Sequence-Diagrams",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/system-architecture/Sequence-Diagrams.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 5,
              "frontMatter": {
                "sidebar_position": 5
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Development Environment",
                "permalink": "/your-project-name/docs/system-architecture/Development-Environment"
              },
              "next": {
                "title": "Version Control",
                "permalink": "/your-project-name/docs/system-architecture/Version-Control"
              }
            },
            {
              "id": "system-architecture/Version-Control",
              "title": "Version Control",
              "description": "GitHub will be used as the version control system.",
              "source": "@site/docs/system-architecture/Version-Control.md",
              "sourceDirName": "system-architecture",
              "slug": "/system-architecture/Version-Control",
              "permalink": "/your-project-name/docs/system-architecture/Version-Control",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/system-architecture/Version-Control.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 5,
              "frontMatter": {
                "sidebar_position": 5
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Sequence-Diagrams",
                "permalink": "/your-project-name/docs/system-architecture/Sequence-Diagrams"
              },
              "next": {
                "title": "API Specification",
                "permalink": "/your-project-name/docs/category/api-specification"
              }
            },
            {
              "id": "testing/acceptence-testing",
              "title": "Acceptance test",
              "description": "| Project Name | Wildlife Odyssey | Block/Skip (B) | 0   |     |",
              "source": "@site/docs/testing/acceptence-testing.md",
              "sourceDirName": "testing",
              "slug": "/testing/acceptence-testing",
              "permalink": "/your-project-name/docs/testing/acceptence-testing",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/testing/acceptence-testing.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 3,
              "frontMatter": {
                "sidebar_position": 3
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Integration tests",
                "permalink": "/your-project-name/docs/testing/integration-testing"
              }
            },
            {
              "id": "testing/integration-testing",
              "title": "Integration tests",
              "description": "| Test ID | Use Case | Mock Objects | Input | Results |",
              "source": "@site/docs/testing/integration-testing.md",
              "sourceDirName": "testing",
              "slug": "/testing/integration-testing",
              "permalink": "/your-project-name/docs/testing/integration-testing",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/testing/integration-testing.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 2,
              "frontMatter": {
                "sidebar_position": 2
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Unit tests",
                "permalink": "/your-project-name/docs/testing/unit-testing"
              },
              "next": {
                "title": "Acceptance test",
                "permalink": "/your-project-name/docs/testing/acceptence-testing"
              }
            },
            {
              "id": "testing/unit-testing",
              "title": "Unit tests",
              "description": "async void StartGame(GameMode mode)",
              "source": "@site/docs/testing/unit-testing.md",
              "sourceDirName": "testing",
              "slug": "/testing/unit-testing",
              "permalink": "/your-project-name/docs/testing/unit-testing",
              "draft": false,
              "unlisted": false,
              "editUrl": "https://github.com/undefined/your-project-name/edit/main/documentation/docs/testing/unit-testing.md",
              "tags": [],
              "version": "current",
              "lastUpdatedBy": "Author",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Test Procedures",
                "permalink": "/your-project-name/docs/category/test-procedures"
              },
              "next": {
                "title": "Integration tests",
                "permalink": "/your-project-name/docs/testing/integration-testing"
              }
            }
          ],
          "drafts": [],
          "sidebars": {
            "docsSidebar": [
              {
                "type": "doc",
                "id": "intro"
              },
              {
                "type": "category",
                "label": "Requirements Specification",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "requirements/Features-and-Requirements"
                  },
                  {
                    "type": "doc",
                    "id": "requirements/General-Requirements"
                  },
                  {
                    "type": "doc",
                    "id": "requirements/System-Block-Diagram"
                  },
                  {
                    "type": "doc",
                    "id": "requirements/System-Overview"
                  },
                  {
                    "type": "doc",
                    "id": "requirements/Use-Case-Descriptions"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Document Overview goes here.",
                  "slug": "/category/requirements-specification",
                  "permalink": "/your-project-name/docs/category/requirements-specification"
                }
              },
              {
                "type": "category",
                "label": "System Architecture",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "system-architecture/Algorithms"
                  },
                  {
                    "type": "doc",
                    "id": "system-architecture/Architecture"
                  },
                  {
                    "type": "doc",
                    "id": "system-architecture/Development-Environment"
                  },
                  {
                    "type": "doc",
                    "id": "system-architecture/Sequence-Diagrams"
                  },
                  {
                    "type": "doc",
                    "id": "system-architecture/Version-Control"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Document Overview goes here.",
                  "slug": "/category/system-architecture",
                  "permalink": "/your-project-name/docs/category/system-architecture"
                }
              },
              {
                "type": "category",
                "label": "API Specification",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "api-specification/design-api-intro"
                  },
                  {
                    "type": "doc",
                    "id": "api-specification/openapi-spec"
                  },
                  {
                    "type": "doc",
                    "id": "api-specification/calculator-model-generated"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Please remove and replace examples where necessary.",
                  "slug": "/category/api-specification",
                  "permalink": "/your-project-name/docs/category/api-specification"
                }
              },
              {
                "type": "category",
                "label": "Test Procedures",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "testing/unit-testing"
                  },
                  {
                    "type": "doc",
                    "id": "testing/integration-testing"
                  },
                  {
                    "type": "doc",
                    "id": "testing/acceptence-testing"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Please remove and replace examples where necessary.",
                  "slug": "/category/test-procedures",
                  "permalink": "/your-project-name/docs/category/test-procedures"
                }
              }
            ]
          }
        }
      ]
    },
    "tutorial": {
      "loadedVersions": [
        {
          "versionName": "current",
          "label": "Next",
          "banner": null,
          "badge": false,
          "noIndex": false,
          "className": "docs-version-current",
          "path": "/your-project-name/tutorial",
          "tagsPath": "/your-project-name/tutorial/tags",
          "isLast": true,
          "routePriority": -1,
          "sidebarFilePath": "/workspaces/project-rpg-elements-game/documentation/sidebars.js",
          "contentPath": "/workspaces/project-rpg-elements-game/documentation/tutorial",
          "contentPathLocalized": "/workspaces/project-rpg-elements-game/documentation/i18n/en/docusaurus-plugin-content-docs-tutorial/current",
          "docs": [
            {
              "id": "custom-components/figure",
              "title": "Figure Component",
              "description": "The figure component is used for images or media that should be referenced.",
              "source": "@site/tutorial/custom-components/figure.mdx",
              "sourceDirName": "custom-components",
              "slug": "/custom-components/figure",
              "permalink": "/your-project-name/tutorial/custom-components/figure",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Custom Components",
                "permalink": "/your-project-name/tutorial/category/custom-components"
              }
            },
            {
              "id": "intro",
              "title": "Tutorial Intro",
              "description": "Let's discover Docusaurus in less than 5 minutes.",
              "source": "@site/tutorial/intro.md",
              "sourceDirName": ".",
              "slug": "/intro",
              "permalink": "/your-project-name/tutorial/intro",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              },
              "sidebar": "docsSidebar",
              "next": {
                "title": "Tutorial - Basics",
                "permalink": "/your-project-name/tutorial/category/tutorial---basics"
              }
            },
            {
              "id": "tutorial-basics/congratulations",
              "title": "Congratulations!",
              "description": "You have just learned the basics of Docusaurus and made some changes to the initial template.",
              "source": "@site/tutorial/tutorial-basics/congratulations.md",
              "sourceDirName": "tutorial-basics",
              "slug": "/tutorial-basics/congratulations",
              "permalink": "/your-project-name/tutorial/tutorial-basics/congratulations",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 6,
              "frontMatter": {
                "sidebar_position": 6
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Deploy your site",
                "permalink": "/your-project-name/tutorial/tutorial-basics/deploy-your-site"
              },
              "next": {
                "title": "Tutorial - Extras",
                "permalink": "/your-project-name/tutorial/category/tutorial---extras"
              }
            },
            {
              "id": "tutorial-basics/create-a-document",
              "title": "Create a Document",
              "description": "Documents are groups of pages connected through:",
              "source": "@site/tutorial/tutorial-basics/create-a-document.md",
              "sourceDirName": "tutorial-basics",
              "slug": "/tutorial-basics/create-a-document",
              "permalink": "/your-project-name/tutorial/tutorial-basics/create-a-document",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "sidebar_position": 2
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Create a Page",
                "permalink": "/your-project-name/tutorial/tutorial-basics/create-a-page"
              },
              "next": {
                "title": "Markdown Features",
                "permalink": "/your-project-name/tutorial/tutorial-basics/markdown-features"
              }
            },
            {
              "id": "tutorial-basics/create-a-page",
              "title": "Create a Page",
              "description": "Add Markdown or React files to src/pages to create a standalone page:",
              "source": "@site/tutorial/tutorial-basics/create-a-page.md",
              "sourceDirName": "tutorial-basics",
              "slug": "/tutorial-basics/create-a-page",
              "permalink": "/your-project-name/tutorial/tutorial-basics/create-a-page",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Tutorial - Basics",
                "permalink": "/your-project-name/tutorial/category/tutorial---basics"
              },
              "next": {
                "title": "Create a Document",
                "permalink": "/your-project-name/tutorial/tutorial-basics/create-a-document"
              }
            },
            {
              "id": "tutorial-basics/deploy-your-site",
              "title": "Deploy your site",
              "description": "Docusaurus is a static-site-generator (also called Jamstack).",
              "source": "@site/tutorial/tutorial-basics/deploy-your-site.md",
              "sourceDirName": "tutorial-basics",
              "slug": "/tutorial-basics/deploy-your-site",
              "permalink": "/your-project-name/tutorial/tutorial-basics/deploy-your-site",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 5,
              "frontMatter": {
                "sidebar_position": 5
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Markdown Features",
                "permalink": "/your-project-name/tutorial/tutorial-basics/markdown-features"
              },
              "next": {
                "title": "Congratulations!",
                "permalink": "/your-project-name/tutorial/tutorial-basics/congratulations"
              }
            },
            {
              "id": "tutorial-basics/markdown-features",
              "title": "Markdown Features",
              "description": "Docusaurus supports Markdown and a few additional features.",
              "source": "@site/tutorial/tutorial-basics/markdown-features.mdx",
              "sourceDirName": "tutorial-basics",
              "slug": "/tutorial-basics/markdown-features",
              "permalink": "/your-project-name/tutorial/tutorial-basics/markdown-features",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 4,
              "frontMatter": {
                "sidebar_position": 4
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Create a Document",
                "permalink": "/your-project-name/tutorial/tutorial-basics/create-a-document"
              },
              "next": {
                "title": "Deploy your site",
                "permalink": "/your-project-name/tutorial/tutorial-basics/deploy-your-site"
              }
            },
            {
              "id": "tutorial-extras/manage-docs-versions",
              "title": "Manage Docs Versions",
              "description": "Docusaurus can manage multiple versions of your docs.",
              "source": "@site/tutorial/tutorial-extras/manage-docs-versions.md",
              "sourceDirName": "tutorial-extras",
              "slug": "/tutorial-extras/manage-docs-versions",
              "permalink": "/your-project-name/tutorial/tutorial-extras/manage-docs-versions",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Tutorial - Extras",
                "permalink": "/your-project-name/tutorial/category/tutorial---extras"
              },
              "next": {
                "title": "Translate your site",
                "permalink": "/your-project-name/tutorial/tutorial-extras/translate-your-site"
              }
            },
            {
              "id": "tutorial-extras/translate-your-site",
              "title": "Translate your site",
              "description": "Let's translate docs/intro.md to French.",
              "source": "@site/tutorial/tutorial-extras/translate-your-site.md",
              "sourceDirName": "tutorial-extras",
              "slug": "/tutorial-extras/translate-your-site",
              "permalink": "/your-project-name/tutorial/tutorial-extras/translate-your-site",
              "draft": false,
              "unlisted": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "sidebar_position": 2
              },
              "sidebar": "docsSidebar",
              "previous": {
                "title": "Manage Docs Versions",
                "permalink": "/your-project-name/tutorial/tutorial-extras/manage-docs-versions"
              },
              "next": {
                "title": "Custom Components",
                "permalink": "/your-project-name/tutorial/category/custom-components"
              }
            }
          ],
          "drafts": [],
          "sidebars": {
            "docsSidebar": [
              {
                "type": "doc",
                "id": "intro"
              },
              {
                "type": "category",
                "label": "Tutorial - Basics",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "tutorial-basics/create-a-page"
                  },
                  {
                    "type": "doc",
                    "id": "tutorial-basics/create-a-document"
                  },
                  {
                    "type": "doc",
                    "id": "tutorial-basics/markdown-features"
                  },
                  {
                    "type": "doc",
                    "id": "tutorial-basics/deploy-your-site"
                  },
                  {
                    "type": "doc",
                    "id": "tutorial-basics/congratulations"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "5 minutes to learn the most important Docusaurus concepts.",
                  "slug": "/category/tutorial---basics",
                  "permalink": "/your-project-name/tutorial/category/tutorial---basics"
                }
              },
              {
                "type": "category",
                "label": "Tutorial - Extras",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "tutorial-extras/manage-docs-versions"
                  },
                  {
                    "type": "doc",
                    "id": "tutorial-extras/translate-your-site"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "slug": "/category/tutorial---extras",
                  "permalink": "/your-project-name/tutorial/category/tutorial---extras"
                }
              },
              {
                "type": "category",
                "label": "Custom Components",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "custom-components/figure"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Custom Components built for the CIS 4398.",
                  "slug": "/category/custom-components",
                  "permalink": "/your-project-name/tutorial/category/custom-components"
                }
              }
            ]
          }
        }
      ]
    }
  },
  "docusaurus-plugin-content-blog": {
    "default": {
      "blogSidebarTitle": "Recent posts",
      "blogPosts": [],
      "blogListPaginated": [],
      "blogTags": {},
      "blogTagsListPath": "/your-project-name/blog/tags",
      "blogTagsPaginated": []
    }
  },
  "docusaurus-plugin-content-pages": {
    "default": [
      {
        "type": "jsx",
        "permalink": "/your-project-name/",
        "source": "@site/src/pages/index.js"
      },
      {
        "type": "mdx",
        "permalink": "/your-project-name/markdown-page",
        "source": "@site/src/pages/markdown-page.md",
        "title": "Markdown page example",
        "description": "You don't need React to write simple standalone pages.",
        "frontMatter": {
          "title": "Markdown page example"
        },
        "unlisted": false
      }
    ]
  },
  "docusaurus-plugin-debug": {},
  "docusaurus-plugin-redoc": {
    "using-single-yaml": {
      "converted": {
        "openapi": "3.0.2",
        "info": {
          "title": "Swagger Petstore - OpenAPI 3.0",
          "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
          "termsOfService": "http://swagger.io/terms/",
          "contact": {
            "email": "apiteam@swagger.io"
          },
          "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
          },
          "version": "1.0.11"
        },
        "externalDocs": {
          "description": "Find out more about Swagger",
          "url": "http://swagger.io"
        },
        "servers": [
          {
            "url": "/api/v3"
          }
        ],
        "tags": [
          {
            "name": "pet",
            "description": "Everything about your Pets",
            "externalDocs": {
              "description": "Find out more",
              "url": "http://swagger.io"
            }
          },
          {
            "name": "store",
            "description": "Access to Petstore orders",
            "externalDocs": {
              "description": "Find out more about our store",
              "url": "http://swagger.io"
            }
          },
          {
            "name": "user",
            "description": "Operations about user"
          }
        ],
        "paths": {
          "/pet": {
            "put": {
              "tags": [
                "pet"
              ],
              "summary": "Update an existing pet",
              "description": "Update an existing pet by Id",
              "operationId": "updatePet",
              "requestBody": {
                "description": "Update an existent pet in the store",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  },
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    },
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Pet not found"
                },
                "405": {
                  "description": "Validation exception"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "pet"
              ],
              "summary": "Add a new pet to the store",
              "description": "Add a new pet to the store",
              "operationId": "addPet",
              "requestBody": {
                "description": "Create a new pet in the store",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  },
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    },
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    }
                  }
                },
                "405": {
                  "description": "Invalid input"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/pet/findByStatus": {
            "get": {
              "tags": [
                "pet"
              ],
              "summary": "Finds Pets by status",
              "description": "Multiple status values can be provided with comma separated strings",
              "operationId": "findPetsByStatus",
              "parameters": [
                {
                  "name": "status",
                  "in": "query",
                  "description": "Status values that need to be considered for filter",
                  "required": false,
                  "explode": true,
                  "schema": {
                    "type": "string",
                    "default": "available",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ]
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pet"
                        }
                      }
                    },
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pet"
                        }
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid status value"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/pet/findByTags": {
            "get": {
              "tags": [
                "pet"
              ],
              "summary": "Finds Pets by tags",
              "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
              "operationId": "findPetsByTags",
              "parameters": [
                {
                  "name": "tags",
                  "in": "query",
                  "description": "Tags to filter by",
                  "required": false,
                  "explode": true,
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pet"
                        }
                      }
                    },
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pet"
                        }
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid tag value"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/pet/{petId}": {
            "get": {
              "tags": [
                "pet"
              ],
              "summary": "Find pet by ID",
              "description": "Returns a single pet",
              "operationId": "getPetById",
              "parameters": [
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet to return",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    },
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Pet not found"
                }
              },
              "security": [
                {
                  "api_key": []
                },
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "pet"
              ],
              "summary": "Updates a pet in the store with form data",
              "description": "",
              "operationId": "updatePetWithForm",
              "parameters": [
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet that needs to be updated",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                },
                {
                  "name": "name",
                  "in": "query",
                  "description": "Name of pet that needs to be updated",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "status",
                  "in": "query",
                  "description": "Status of pet that needs to be updated",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "405": {
                  "description": "Invalid input"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "pet"
              ],
              "summary": "Deletes a pet",
              "description": "",
              "operationId": "deletePet",
              "parameters": [
                {
                  "name": "api_key",
                  "in": "header",
                  "description": "",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "petId",
                  "in": "path",
                  "description": "Pet id to delete",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid pet value"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/pet/{petId}/uploadImage": {
            "post": {
              "tags": [
                "pet"
              ],
              "summary": "uploads an image",
              "description": "",
              "operationId": "uploadFile",
              "parameters": [
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet to update",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                },
                {
                  "name": "additionalMetadata",
                  "in": "query",
                  "description": "Additional Metadata",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/octet-stream": {
                    "schema": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ApiResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/store/inventory": {
            "get": {
              "tags": [
                "store"
              ],
              "summary": "Returns pet inventories by status",
              "description": "Returns a map of status codes to quantities",
              "operationId": "getInventory",
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "integer",
                          "format": "int32"
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "api_key": []
                }
              ]
            }
          },
          "/store/order": {
            "post": {
              "tags": [
                "store"
              ],
              "summary": "Place an order for a pet",
              "description": "Place a new order in the store",
              "operationId": "placeOrder",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Order"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/Order"
                    }
                  },
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                },
                "405": {
                  "description": "Invalid input"
                }
              }
            }
          },
          "/store/order/{orderId}": {
            "get": {
              "tags": [
                "store"
              ],
              "summary": "Find purchase order by ID",
              "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
              "operationId": "getOrderById",
              "parameters": [
                {
                  "name": "orderId",
                  "in": "path",
                  "description": "ID of order that needs to be fetched",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Order"
                      }
                    },
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Order not found"
                }
              }
            },
            "delete": {
              "tags": [
                "store"
              ],
              "summary": "Delete purchase order by ID",
              "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
              "operationId": "deleteOrder",
              "parameters": [
                {
                  "name": "orderId",
                  "in": "path",
                  "description": "ID of the order that needs to be deleted",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Order not found"
                }
              }
            }
          },
          "/user": {
            "post": {
              "tags": [
                "user"
              ],
              "summary": "Create user",
              "description": "This can only be done by the logged in user.",
              "operationId": "createUser",
              "requestBody": {
                "description": "Created user object",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              },
              "responses": {
                "default": {
                  "description": "successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "/user/createWithList": {
            "post": {
              "tags": [
                "user"
              ],
              "summary": "Creates list of users with given input array",
              "description": "Creates list of users with given input array",
              "operationId": "createUsersWithListInput",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                },
                "default": {
                  "description": "successful operation"
                }
              }
            }
          },
          "/user/login": {
            "get": {
              "tags": [
                "user"
              ],
              "summary": "Logs user into the system",
              "description": "",
              "operationId": "loginUser",
              "parameters": [
                {
                  "name": "username",
                  "in": "query",
                  "description": "The user name for login",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "password",
                  "in": "query",
                  "description": "The password for login in clear text",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "headers": {
                    "X-Rate-Limit": {
                      "description": "calls per hour allowed by the user",
                      "schema": {
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "X-Expires-After": {
                      "description": "date in UTC when token expires",
                      "schema": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  },
                  "content": {
                    "application/xml": {
                      "schema": {
                        "type": "string"
                      }
                    },
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid username/password supplied"
                }
              }
            }
          },
          "/user/logout": {
            "get": {
              "tags": [
                "user"
              ],
              "summary": "Logs out current logged in user session",
              "description": "",
              "operationId": "logoutUser",
              "parameters": [],
              "responses": {
                "default": {
                  "description": "successful operation"
                }
              }
            }
          },
          "/user/{username}": {
            "get": {
              "tags": [
                "user"
              ],
              "summary": "Get user by user name",
              "description": "",
              "operationId": "getUserByName",
              "parameters": [
                {
                  "name": "username",
                  "in": "path",
                  "description": "The name that needs to be fetched. Use user1 for testing. ",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid username supplied"
                },
                "404": {
                  "description": "User not found"
                }
              }
            },
            "put": {
              "tags": [
                "user"
              ],
              "summary": "Update user",
              "description": "This can only be done by the logged in user.",
              "operationId": "updateUser",
              "parameters": [
                {
                  "name": "username",
                  "in": "path",
                  "description": "name that need to be deleted",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "description": "Update an existent user in the store",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              },
              "responses": {
                "default": {
                  "description": "successful operation"
                }
              }
            },
            "delete": {
              "tags": [
                "user"
              ],
              "summary": "Delete user",
              "description": "This can only be done by the logged in user.",
              "operationId": "deleteUser",
              "parameters": [
                {
                  "name": "username",
                  "in": "path",
                  "description": "The name that needs to be deleted",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid username supplied"
                },
                "404": {
                  "description": "User not found"
                }
              }
            }
          }
        },
        "components": {
          "schemas": {
            "Order": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "petId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 198772
                },
                "quantity": {
                  "type": "integer",
                  "format": "int32",
                  "example": 7
                },
                "shipDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "status": {
                  "type": "string",
                  "description": "Order Status",
                  "example": "approved",
                  "enum": [
                    "placed",
                    "approved",
                    "delivered"
                  ]
                },
                "complete": {
                  "type": "boolean"
                }
              },
              "xml": {
                "name": "order"
              }
            },
            "Customer": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 100000
                },
                "username": {
                  "type": "string",
                  "example": "fehguy"
                },
                "address": {
                  "type": "array",
                  "xml": {
                    "name": "addresses",
                    "wrapped": true
                  },
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                }
              },
              "xml": {
                "name": "customer"
              }
            },
            "Address": {
              "type": "object",
              "properties": {
                "street": {
                  "type": "string",
                  "example": "437 Lytton"
                },
                "city": {
                  "type": "string",
                  "example": "Palo Alto"
                },
                "state": {
                  "type": "string",
                  "example": "CA"
                },
                "zip": {
                  "type": "string",
                  "example": "94301"
                }
              },
              "xml": {
                "name": "address"
              }
            },
            "Category": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Dogs"
                }
              },
              "xml": {
                "name": "category"
              }
            },
            "User": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "username": {
                  "type": "string",
                  "example": "theUser"
                },
                "firstName": {
                  "type": "string",
                  "example": "John"
                },
                "lastName": {
                  "type": "string",
                  "example": "James"
                },
                "email": {
                  "type": "string",
                  "example": "john@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "12345"
                },
                "phone": {
                  "type": "string",
                  "example": "12345"
                },
                "userStatus": {
                  "type": "integer",
                  "description": "User Status",
                  "format": "int32",
                  "example": 1
                }
              },
              "xml": {
                "name": "user"
              }
            },
            "Tag": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "tag"
              }
            },
            "Pet": {
              "required": [
                "name",
                "photoUrls"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "name": {
                  "type": "string",
                  "example": "doggie"
                },
                "category": {
                  "$ref": "#/components/schemas/Category"
                },
                "photoUrls": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "type": "string",
                    "xml": {
                      "name": "photoUrl"
                    }
                  }
                },
                "tags": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                },
                "status": {
                  "type": "string",
                  "description": "pet status in the store",
                  "enum": [
                    "available",
                    "pending",
                    "sold"
                  ]
                }
              },
              "xml": {
                "name": "pet"
              }
            },
            "ApiResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32"
                },
                "type": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "##default"
              }
            }
          },
          "requestBodies": {
            "Pet": {
              "description": "Pet object that needs to be added to the store",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Pet"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            },
            "UserArray": {
              "description": "List of user object",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "securitySchemes": {
            "petstore_auth": {
              "type": "oauth2",
              "flows": {
                "implicit": {
                  "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
                  "scopes": {
                    "write:pets": "modify pets in your account",
                    "read:pets": "read your pets"
                  }
                }
              }
            },
            "api_key": {
              "type": "apiKey",
              "name": "api_key",
              "in": "header"
            }
          }
        }
      },
      "bundle": {
        "openapi": "3.0.2",
        "info": {
          "title": "Swagger Petstore - OpenAPI 3.0",
          "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
          "termsOfService": "http://swagger.io/terms/",
          "contact": {
            "email": "apiteam@swagger.io"
          },
          "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
          },
          "version": "1.0.11"
        },
        "externalDocs": {
          "description": "Find out more about Swagger",
          "url": "http://swagger.io"
        },
        "servers": [
          {
            "url": "/api/v3"
          }
        ],
        "tags": [
          {
            "name": "pet",
            "description": "Everything about your Pets",
            "externalDocs": {
              "description": "Find out more",
              "url": "http://swagger.io"
            }
          },
          {
            "name": "store",
            "description": "Access to Petstore orders",
            "externalDocs": {
              "description": "Find out more about our store",
              "url": "http://swagger.io"
            }
          },
          {
            "name": "user",
            "description": "Operations about user"
          }
        ],
        "paths": {
          "/pet": {
            "put": {
              "tags": [
                "pet"
              ],
              "summary": "Update an existing pet",
              "description": "Update an existing pet by Id",
              "operationId": "updatePet",
              "requestBody": {
                "description": "Update an existent pet in the store",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  },
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    },
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Pet not found"
                },
                "405": {
                  "description": "Validation exception"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "pet"
              ],
              "summary": "Add a new pet to the store",
              "description": "Add a new pet to the store",
              "operationId": "addPet",
              "requestBody": {
                "description": "Create a new pet in the store",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  },
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    },
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    }
                  }
                },
                "405": {
                  "description": "Invalid input"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/pet/findByStatus": {
            "get": {
              "tags": [
                "pet"
              ],
              "summary": "Finds Pets by status",
              "description": "Multiple status values can be provided with comma separated strings",
              "operationId": "findPetsByStatus",
              "parameters": [
                {
                  "name": "status",
                  "in": "query",
                  "description": "Status values that need to be considered for filter",
                  "required": false,
                  "explode": true,
                  "schema": {
                    "type": "string",
                    "default": "available",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ]
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pet"
                        }
                      }
                    },
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pet"
                        }
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid status value"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/pet/findByTags": {
            "get": {
              "tags": [
                "pet"
              ],
              "summary": "Finds Pets by tags",
              "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
              "operationId": "findPetsByTags",
              "parameters": [
                {
                  "name": "tags",
                  "in": "query",
                  "description": "Tags to filter by",
                  "required": false,
                  "explode": true,
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pet"
                        }
                      }
                    },
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pet"
                        }
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid tag value"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/pet/{petId}": {
            "get": {
              "tags": [
                "pet"
              ],
              "summary": "Find pet by ID",
              "description": "Returns a single pet",
              "operationId": "getPetById",
              "parameters": [
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet to return",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    },
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Pet not found"
                }
              },
              "security": [
                {
                  "api_key": []
                },
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "pet"
              ],
              "summary": "Updates a pet in the store with form data",
              "description": "",
              "operationId": "updatePetWithForm",
              "parameters": [
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet that needs to be updated",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                },
                {
                  "name": "name",
                  "in": "query",
                  "description": "Name of pet that needs to be updated",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "status",
                  "in": "query",
                  "description": "Status of pet that needs to be updated",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "405": {
                  "description": "Invalid input"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "pet"
              ],
              "summary": "Deletes a pet",
              "description": "",
              "operationId": "deletePet",
              "parameters": [
                {
                  "name": "api_key",
                  "in": "header",
                  "description": "",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "petId",
                  "in": "path",
                  "description": "Pet id to delete",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid pet value"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/pet/{petId}/uploadImage": {
            "post": {
              "tags": [
                "pet"
              ],
              "summary": "uploads an image",
              "description": "",
              "operationId": "uploadFile",
              "parameters": [
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet to update",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                },
                {
                  "name": "additionalMetadata",
                  "in": "query",
                  "description": "Additional Metadata",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/octet-stream": {
                    "schema": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ApiResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/store/inventory": {
            "get": {
              "tags": [
                "store"
              ],
              "summary": "Returns pet inventories by status",
              "description": "Returns a map of status codes to quantities",
              "operationId": "getInventory",
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "integer",
                          "format": "int32"
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "api_key": []
                }
              ]
            }
          },
          "/store/order": {
            "post": {
              "tags": [
                "store"
              ],
              "summary": "Place an order for a pet",
              "description": "Place a new order in the store",
              "operationId": "placeOrder",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Order"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/Order"
                    }
                  },
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                },
                "405": {
                  "description": "Invalid input"
                }
              }
            }
          },
          "/store/order/{orderId}": {
            "get": {
              "tags": [
                "store"
              ],
              "summary": "Find purchase order by ID",
              "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
              "operationId": "getOrderById",
              "parameters": [
                {
                  "name": "orderId",
                  "in": "path",
                  "description": "ID of order that needs to be fetched",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Order"
                      }
                    },
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Order not found"
                }
              }
            },
            "delete": {
              "tags": [
                "store"
              ],
              "summary": "Delete purchase order by ID",
              "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
              "operationId": "deleteOrder",
              "parameters": [
                {
                  "name": "orderId",
                  "in": "path",
                  "description": "ID of the order that needs to be deleted",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Order not found"
                }
              }
            }
          },
          "/user": {
            "post": {
              "tags": [
                "user"
              ],
              "summary": "Create user",
              "description": "This can only be done by the logged in user.",
              "operationId": "createUser",
              "requestBody": {
                "description": "Created user object",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              },
              "responses": {
                "default": {
                  "description": "successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "/user/createWithList": {
            "post": {
              "tags": [
                "user"
              ],
              "summary": "Creates list of users with given input array",
              "description": "Creates list of users with given input array",
              "operationId": "createUsersWithListInput",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                },
                "default": {
                  "description": "successful operation"
                }
              }
            }
          },
          "/user/login": {
            "get": {
              "tags": [
                "user"
              ],
              "summary": "Logs user into the system",
              "description": "",
              "operationId": "loginUser",
              "parameters": [
                {
                  "name": "username",
                  "in": "query",
                  "description": "The user name for login",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "password",
                  "in": "query",
                  "description": "The password for login in clear text",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "headers": {
                    "X-Rate-Limit": {
                      "description": "calls per hour allowed by the user",
                      "schema": {
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "X-Expires-After": {
                      "description": "date in UTC when token expires",
                      "schema": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  },
                  "content": {
                    "application/xml": {
                      "schema": {
                        "type": "string"
                      }
                    },
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid username/password supplied"
                }
              }
            }
          },
          "/user/logout": {
            "get": {
              "tags": [
                "user"
              ],
              "summary": "Logs out current logged in user session",
              "description": "",
              "operationId": "logoutUser",
              "parameters": [],
              "responses": {
                "default": {
                  "description": "successful operation"
                }
              }
            }
          },
          "/user/{username}": {
            "get": {
              "tags": [
                "user"
              ],
              "summary": "Get user by user name",
              "description": "",
              "operationId": "getUserByName",
              "parameters": [
                {
                  "name": "username",
                  "in": "path",
                  "description": "The name that needs to be fetched. Use user1 for testing. ",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid username supplied"
                },
                "404": {
                  "description": "User not found"
                }
              }
            },
            "put": {
              "tags": [
                "user"
              ],
              "summary": "Update user",
              "description": "This can only be done by the logged in user.",
              "operationId": "updateUser",
              "parameters": [
                {
                  "name": "username",
                  "in": "path",
                  "description": "name that need to be deleted",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "description": "Update an existent user in the store",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              },
              "responses": {
                "default": {
                  "description": "successful operation"
                }
              }
            },
            "delete": {
              "tags": [
                "user"
              ],
              "summary": "Delete user",
              "description": "This can only be done by the logged in user.",
              "operationId": "deleteUser",
              "parameters": [
                {
                  "name": "username",
                  "in": "path",
                  "description": "The name that needs to be deleted",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid username supplied"
                },
                "404": {
                  "description": "User not found"
                }
              }
            }
          }
        },
        "components": {
          "schemas": {
            "Order": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "petId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 198772
                },
                "quantity": {
                  "type": "integer",
                  "format": "int32",
                  "example": 7
                },
                "shipDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "status": {
                  "type": "string",
                  "description": "Order Status",
                  "example": "approved",
                  "enum": [
                    "placed",
                    "approved",
                    "delivered"
                  ]
                },
                "complete": {
                  "type": "boolean"
                }
              },
              "xml": {
                "name": "order"
              }
            },
            "Customer": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 100000
                },
                "username": {
                  "type": "string",
                  "example": "fehguy"
                },
                "address": {
                  "type": "array",
                  "xml": {
                    "name": "addresses",
                    "wrapped": true
                  },
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                }
              },
              "xml": {
                "name": "customer"
              }
            },
            "Address": {
              "type": "object",
              "properties": {
                "street": {
                  "type": "string",
                  "example": "437 Lytton"
                },
                "city": {
                  "type": "string",
                  "example": "Palo Alto"
                },
                "state": {
                  "type": "string",
                  "example": "CA"
                },
                "zip": {
                  "type": "string",
                  "example": "94301"
                }
              },
              "xml": {
                "name": "address"
              }
            },
            "Category": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Dogs"
                }
              },
              "xml": {
                "name": "category"
              }
            },
            "User": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "username": {
                  "type": "string",
                  "example": "theUser"
                },
                "firstName": {
                  "type": "string",
                  "example": "John"
                },
                "lastName": {
                  "type": "string",
                  "example": "James"
                },
                "email": {
                  "type": "string",
                  "example": "john@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "12345"
                },
                "phone": {
                  "type": "string",
                  "example": "12345"
                },
                "userStatus": {
                  "type": "integer",
                  "description": "User Status",
                  "format": "int32",
                  "example": 1
                }
              },
              "xml": {
                "name": "user"
              }
            },
            "Tag": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "tag"
              }
            },
            "Pet": {
              "required": [
                "name",
                "photoUrls"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "name": {
                  "type": "string",
                  "example": "doggie"
                },
                "category": {
                  "$ref": "#/components/schemas/Category"
                },
                "photoUrls": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "type": "string",
                    "xml": {
                      "name": "photoUrl"
                    }
                  }
                },
                "tags": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                },
                "status": {
                  "type": "string",
                  "description": "pet status in the store",
                  "enum": [
                    "available",
                    "pending",
                    "sold"
                  ]
                }
              },
              "xml": {
                "name": "pet"
              }
            },
            "ApiResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32"
                },
                "type": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "##default"
              }
            }
          },
          "requestBodies": {
            "Pet": {
              "description": "Pet object that needs to be added to the store",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Pet"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            },
            "UserArray": {
              "description": "List of user object",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "securitySchemes": {
            "petstore_auth": {
              "type": "oauth2",
              "flows": {
                "implicit": {
                  "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
                  "scopes": {
                    "write:pets": "modify pets in your account",
                    "read:pets": "read your pets"
                  }
                }
              }
            },
            "api_key": {
              "type": "apiKey",
              "name": "api_key",
              "in": "header"
            }
          }
        }
      }
    }
  },
  "docusaurus-theme-classic": {},
  "docusaurus-theme-redoc": {},
  "docusaurus2-dotenv-2": {},
  "docusaurus-plugin-image-zoom": {},
  "docusaurus-theme-live-codeblock": {},
  "docusaurus-theme-mermaid": {},
  "docusaurus-bootstrap-plugin": {},
  "docusaurus-mdx-fallback-plugin": {}
}